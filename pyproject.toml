[tool.poetry]
name = "agent-kanban"
version = "0.1.0"
description = "A kanban board system for managing an agentic workforce with MCP integration"
authors = ["Evan Schalton <Evan.Schalton@Gmail.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.115.0"
sqlmodel = "^0.0.22"
uvicorn = {extras = ["standard"], version = "^0.32.0"}
python-dotenv = "^1.0.1"
websockets = "^13.1"
mcp = "^1.1.2"
pydantic = "^2.9.2"
sqlalchemy = "^2.0.35"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
httpx = "^0.27.2"
ruff = "^0.7.2"
black = "^24.10.0"
invoke = "^2.2.0"
pre-commit = "^3.5.0"
mypy = "^1.11.0"
bandit = "^1.7.5"
pytest-cov = "^4.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    "__pycache__",
    "docs",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
]

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "F",     # pyflakes
    "I",     # isort
    "B",     # flake8-bugbear
    "C4",    # flake8-comprehensions
    "UP",    # pyupgrade
]
ignore = [
    "F821",  # Allow forward references in SQLModel relationships
    "E722",  # Bare except statements - will fix in follow-up
    "B008",  # Function call in default argument - will fix in follow-up
    "E402",  # Module level import not at top - will fix in follow-up
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]
"backend/app/models/*" = ["F821"]  # Allow forward references in SQLModel relationships

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true
exclude = [
    ".venv",
    "venv",
    "tests",
    "docs",
    "build",
    "dist",
]

[tool.bandit]
exclude_dirs = [
    "tests",
    "test",
    ".venv",
    "venv",
]
skips = ["B108", "B601"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
    "backend/tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["backend", "src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
