name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}
        restore-keys: |
          pre-commit-${{ runner.os }}-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit invoke
        if [ -f backend/requirements.txt ]; then pip install -r backend/requirements.txt; fi
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

    - name: Install Node dependencies
      run: |
        cd frontend
        npm ci

    - name: Run pre-commit checks
      run: |
        pre-commit run --all-files --show-diff-on-failure

  test-backend:
    runs-on: ubuntu-latest
    needs: pre-commit

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        cd backend
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Set testing environment
      run: |
        echo "TESTING=true" >> $GITHUB_ENV

    - name: Run backend tests
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=term-missing --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Cleanup test databases
      if: always()
      run: |
        cd backend
        if [ -f ./scripts/cleanup_test_dbs.sh ]; then
          ./scripts/cleanup_test_dbs.sh
        fi

    - name: Verify cleanup
      if: always()
      run: |
        cd backend
        # Check that no test databases remain
        if ls test_*.db 2>/dev/null || ls *.test.db 2>/dev/null || [ -d test_databases ]; then
          echo "WARNING: Test databases not fully cleaned up"
          ls -la test_*.db *.test.db test_databases/ 2>/dev/null || true
        else
          echo "âœ“ All test databases cleaned up successfully"
        fi

  test-frontend:
    runs-on: ubuntu-latest
    needs: pre-commit

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd frontend
        npm ci

    - name: Run linting
      run: |
        cd frontend
        npm run lint || true  # Don't fail on lint warnings

    - name: Run type checking
      run: |
        cd frontend
        npm run type-check || true  # Don't fail on type errors initially

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --run --coverage || true  # Don't fail if no tests yet

    - name: Build frontend
      run: |
        cd frontend
        npm run build

  security-check:
    runs-on: ubuntu-latest
    needs: pre-commit

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r backend/ src/ -ll --skip B108 -f json -o bandit-report.json || true

    - name: Check for known vulnerabilities
      run: |
        if [ -f backend/requirements.txt ]; then
          safety check -r backend/requirements.txt --json || true
        fi

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
